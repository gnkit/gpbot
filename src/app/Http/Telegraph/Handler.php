<?php

namespace App\Http\Telegraph;

use App\Actions\Account\GetAccountChatIdAction;
use App\Actions\Account\UpsertAccountAction;
use App\Actions\Product\GetProductByAccountIdAction;
use App\Actions\Product\UpsertProductAction;
use App\DataTransferObjects\AccountData;
use App\DataTransferObjects\ProductData;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use Illuminate\Support\Carbon;
use Illuminate\Support\Stringable;

final class Handler extends WebhookHandler
{
    public function start(): void
    {
        if (null !== GetAccountChatIdAction::execute($this->message->from()->id())) {

            $this->chat->message("–°”ô–ª–µ–º, " . $this->message->from()->username() . "! \n–ú–µ–Ω—é –∞—Ä“õ—ã–ª—ã “õ–∞–∂–µ—Ç—Ç—ñ –Ω“±—Å“õ–∞—É–¥—ã —Ç–∞“£–¥–∞“£—ã–∑.")->send();
        } else {
            $data = AccountData::from([
                'chat_id' => $this->message->from()->id(),
                'username' => $this->message->from()->username() ?? '',
                'firstname' => $this->message->from()->firstName() ?? '',
                'lastname' => $this->message->from()->lastName() ?? '',
                'type' => $this->message->chat()->type() ?? '',
            ]);

            UpsertAccountAction::execute($data);

            $this->chat->message("–°”ô–ª–µ–º, –±–∞“ì–∞–Ω—ã –±–∞“õ—ã–ª–∞—É “õ—ã–∑–º–µ—Ç—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! \n\n–ú–µ–Ω—é –∞—Ä“õ—ã–ª—ã “õ–∞–∂–µ—Ç—Ç—ñ –Ω“±—Å“õ–∞—É–¥—ã —Ç–∞“£–¥–∞“£—ã–∑.")->send();
        }
    }

    public function add(): void
    {
        if (null !== GetProductByAccountIdAction::execute((GetAccountChatIdAction::execute($this->message->from()->id()))->id)) {

            $this->reply("“ö–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ —Å—ñ–∑–¥—ñ“£ —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑ –±–µ–ª—Å–µ–Ω–¥—ñ. \n–°—ñ–ª—Ç–µ–º–µ“£—ñ–∑–¥—ñ —Ç–µ–∫ ”©—à—ñ—Ä—É –∞—Ä“õ—ã–ª—ã –∂–∞“£–∞—Ä—Ç–∞ –∞–ª–∞—Å—ã–∑.");
        } else {

            $this->chat->message('–°—ñ–ª—Ç–µ–º–µ–Ω—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.')->send();
        }

    }

    public function product(): void
    {
        $product = GetProductByAccountIdAction::execute((GetAccountChatIdAction::execute($this->message->from()->id()))->id);

        $this->chat->message($product->link)->send();
    }

    public function price(): void
    {
        $product = GetProductByAccountIdAction::execute((GetAccountChatIdAction::execute($this->message->from()->id()))->id);
        $prices = [];
        foreach ($product->prices as $key => $price) {
            $prices[] = 'üìÜ ' . Carbon::parse($price->created_at)->isoFormat('D MMMM, YYYY');
            $prices[] = 'üíµ <b>' . round($price->value) . '</b> &#8376;' . PHP_EOL;
        }
        $priceHtml = implode("\n", $prices);
        $this->chat->message($priceHtml)->send();
    }

    public function delete(): void
    {
        $this->chat->message("delete")->send();
    }

    public function help(): void
    {
        $this->chat->message("help")->send();
    }

    protected function handleUnknownCommand(Stringable $text): void
    {
        $this->reply('–ë–µ–ª–≥—ñ—Å—ñ–∑ –Ω“±—Å“õ–∞—É.');
    }

    public function handleChatMessage(Stringable $text): void
    {
        if (filter_var($text->value(), FILTER_VALIDATE_URL)) {
            $this->reply('–°—ñ–∑–¥—ñ“£ —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑ ”©“£–¥–µ–ª—É–¥–µ...');

            sleep(1);

            if (null !== GetProductByAccountIdAction::execute((GetAccountChatIdAction::execute($this->message->from()->id()))->id)) {

                $this->reply("“ö–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ —Å—ñ–∑–¥—ñ“£ —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑ –±–µ–ª—Å–µ–Ω–¥—ñ. \n–°—ñ–ª—Ç–µ–º–µ“£—ñ–∑–¥—ñ —Ç–µ–∫ ”©—à—ñ—Ä—É –∞—Ä“õ—ã–ª—ã –∂–∞“£–∞—Ä—Ç–∞ –∞–ª–∞—Å—ã–∑.");
            } else {

                $data = ProductData::from([
                    'account_id' => (GetAccountChatIdAction::execute($this->message->from()->id()))->id,
                    'link' => $this->message->text(),
                ]);

                UpsertProductAction::execute($data);

                sleep(1);

                $this->reply('–°—ñ–∑–¥—ñ“£ —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã. –ñ–∞—É–∞–ø—Ç—ã –∫“Ø—Ç—ñ“£—ñ–∑...');
            }
        } else {

            $this->reply('–¢–µ–∫ –±–µ–ª–≥—ñ–ª—ñ –Ω“±—Å“õ–∞—É–ª–∞—Ä–¥—ã –±–µ—Ä—ñ“£—ñ–∑.');
        }
    }

}
