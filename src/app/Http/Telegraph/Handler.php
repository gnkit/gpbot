<?php

namespace App\Http\Telegraph;

use App\Actions\Account\GetAccountByChatIdAction;
use App\Actions\Account\UpsertAccountAction;
use App\Actions\Price\GetPriceByProductIdAction;
use App\Actions\Product\DestroyProductAction;
use App\Actions\Product\GetProductByAccountIdAction;
use App\Actions\Product\UpsertProductAction;
use App\Actions\Scraper\CheckUrlAction;
use App\DataTransferObjects\AccountData;
use App\DataTransferObjects\ProductData;
use App\Models\Account;
use App\Models\Product;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use Illuminate\Database\QueryException;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Stringable;

final class Handler extends WebhookHandler
{
    public function start(): void
    {
        if (null !== $this->getAccount($this->message->from()->id())) {

            $this->chat->message("–°”ô–ª–µ–º, " . $this->message->from()->username() . "! \n–ú–µ–Ω—é –∞—Ä“õ—ã–ª—ã “õ–∞–∂–µ—Ç—Ç—ñ –Ω“±—Å“õ–∞—É–¥—ã —Ç–∞“£–¥–∞“£—ã–∑.")->send();
        } else {
            $data = AccountData::from([
                'chat_id' => $this->message->from()->id(),
                'username' => $this->message->from()->username() ?? '',
                'firstname' => $this->message->from()->firstName() ?? '',
                'lastname' => $this->message->from()->lastName() ?? '',
                'type' => $this->message->chat()->type() ?? '',
            ]);

            UpsertAccountAction::execute($data);

            $this->chat->message("–°”ô–ª–µ–º, –±–∞“ì–∞–Ω—ã –±–∞“õ—ã–ª–∞—É “õ—ã–∑–º–µ—Ç—ñ–Ω–µ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! \n\n–ú–µ–Ω—é –∞—Ä“õ—ã–ª—ã “õ–∞–∂–µ—Ç—Ç—ñ –Ω“±—Å“õ–∞—É–¥—ã —Ç–∞“£–¥–∞“£—ã–∑.")->send();
        }
    }

    public function add(): void
    {
        if (null !== $this->accountHasProduct($this->message->from()->id())) {

            $this->reply("“ö–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ —Å—ñ–∑–¥—ñ“£ —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑ –±–µ–ª—Å–µ–Ω–¥—ñ. \n–°—ñ–ª—Ç–µ–º–µ“£—ñ–∑–¥—ñ —Ç–µ–∫ ”©—à—ñ—Ä—É –∞—Ä“õ—ã–ª—ã –∂–∞“£–∞—Ä—Ç–∞ –∞–ª–∞—Å—ã–∑.");
        } else {

            $this->chat->message('–°—ñ–ª—Ç–µ–º–µ–Ω—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.')->send();
        }

    }

    public function product(): void
    {
        if (null !== $this->accountHasProduct($this->message->from()->id())) {

            $product = GetProductByAccountIdAction::execute((GetAccountByChatIdAction::execute($this->message->from()->id()))->id);
            $this->chat->message($product->link)->send();
        } else {

            $this->chat->message('–°—ñ–∑–≥–µ —Å—ñ–ª—Ç–µ–º–µ –µ–Ω–≥—ñ–∑—É –∫–µ—Ä–µ–∫.')->send();
        }

    }

    public function price(): void
    {
        if (null !== $this->accountHasProduct($this->message->from()->id())) {
            $product = $this->accountHasProduct($this->message->from()->id());
            $prices = [];
            foreach ($product->prices as $key => $price) {
                $prices[] = 'üìÜ ' . Carbon::parse($price->created_at)->isoFormat('D MMMM, YYYY');
                $prices[] = 'üíµ <b>' . round($price->value) . '</b> &#8376;' . PHP_EOL;
            }
            $priceHtml = implode("\n", $prices);

            $this->chat->message($priceHtml)->send();
        } else {

            $this->chat->message('–°—ñ–∑–¥–µ –∫”©—Ä—Å–µ—Ç–µ—Ç—ñ–Ω –±–∞“ì–∞ –∂–æ“õ.')->send();
        }
    }

    public function delete(): void
    {
        $product = $this->accountHasProduct($this->message->from()->id());
        if (null !== $product) {
            DestroyProductAction::execute($product);

            $this->chat->message('–°—ñ–∑–¥—ñ“£ —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑ —Å”ô—Ç—Ç—ñ –∂–æ–π—ã–ª–¥—ã.')->send();
        } else {

            $this->chat->message('–°—ñ–∑–¥–µ –∂–æ–π—ã–ª–∞—Ç—ã–Ω —Å—ñ–ª—Ç–µ–º–µ –∂–æ“õ.')->send();
        }

    }

    public function help(): void
    {
        $html = '<b>–ù“±—Å“õ–∞—É–ª—ã“õ</b>' . PHP_EOL
            . '1. “ö–∞–∂–µ—Ç—Ç—ñ —Ç–∞—É–∞—Ä–¥—ã“£ —Å—ñ–ª—Ç–µ–º–µ—Å—ñ–Ω –∫”©—à—ñ—Ä—ñ–ø –∞–ª–∞—Å—ã–∑,' . PHP_EOL
            . '2. –ö”©—à—ñ—Ä—ñ–ª–≥–µ–Ω —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ –±–æ—Ç“õ–∞ –∂—ñ–±–µ—Ä–µ—Å—ñ–∑,' . PHP_EOL
            . '3. –ë–æ—Ç —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑–¥—ñ “õ–∞–±—ã–ª–¥–∞–ø ”©“£–¥–µ–π–¥—ñ,' . PHP_EOL
            . '4. –°—ñ–ª—Ç–µ–º–µ“£—ñ–∑ —Å”ô—Ç—Ç—ñ “õ–∞–±—ã–ª–¥–∞–Ω—Å–∞, —Ç–∞—É–∞—Ä–¥—ã“£ –±–∞—Å—Ç–∞–ø“õ—ã –±–∞“ì–∞—Å—ã –º–µ–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –∫“Ø–Ω—ñ —Ö–∞–±–∞—Ä–ª–∞–º–∞ —Ä–µ—Ç—ñ–Ω–¥–µ –∫–µ–ª–µ–¥—ñ.' . PHP_EOL
            . '5. –¢–∞—É–∞—Ä –±–∞“ì–∞—Å—ã–Ω–¥–∞ ”©–∑–≥–µ—Ä—ñ—Å –±–æ–ª“ì–∞–Ω–¥–∞, —Å—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.' . PHP_EOL
            . '<b>üö´ –ï–≥–µ—Ä, —Å—ñ–ª—Ç–µ–º–µ “õ–∞—Ç–µ –±–æ–ª—Å–∞ (“õ–∞–±—ã–ª–¥–∞–Ω–±–∞—É, ”©“£–¥–µ–ª–º–µ—É), —Å—ñ–ª—Ç–µ–º–µ–Ω—ñ “õ–∞–π—Ç–∞ –∫”©—à—ñ—Ä—ñ–ø –∂—ñ–±–µ—Ä—É—ñ“£—ñ–∑–≥–µ –±–æ–ª–∞–¥—ã.</b>' . PHP_EOL
            . '<b>üìë–ë–æ—Ç ”©“£–¥–µ—É –∞–ª–∞—Ç—ã–Ω —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä –∫–µ–ª–µ—Å—ñ–¥–µ–π:</b>' . PHP_EOL
            . 'alser, evrika, flip, halykmarket, kaspi, mechta, shop, sulpak, techndom' . PHP_EOL;
        $this->chat->message($html)->send();
    }

    protected function handleUnknownCommand(Stringable $text): void
    {
        $this->reply('–ë–µ–ª–≥—ñ—Å—ñ–∑ –Ω“±—Å“õ–∞—É. ');
    }

    public function handleChatMessage(Stringable $text): void
    {
        try {
            $checkedUrl = CheckUrlAction::execute($text->value());

            if ($checkedUrl === 200) {
                $this->reply('–°—ñ–∑–¥—ñ“£ —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑ ”©“£–¥–µ–ª—É–¥–µ...');

                sleep(1);

                if (null !== $this->accountHasProduct($this->message->from()->id())) {

                    $this->reply("“ö–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ —Å—ñ–∑–¥—ñ“£ —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑ –±–µ–ª—Å–µ–Ω–¥—ñ. \n–°—ñ–ª—Ç–µ–º–µ“£—ñ–∑–¥—ñ —Ç–µ–∫ ”©—à—ñ—Ä—É –∞—Ä“õ—ã–ª—ã –∂–∞“£–∞—Ä—Ç–∞ –∞–ª–∞—Å—ã–∑.");
                } else {

                    $data = ProductData::from([
                        'account_id' => (GetAccountByChatIdAction::execute($this->message->from()->id()))->id,
                        'link' => $this->message->text(),
                    ]);

                    $product = UpsertProductAction::execute($data);

                    sleep(1);

                    $this->reply('–°—ñ–∑–¥—ñ“£ —Å—ñ–ª—Ç–µ–º–µ“£—ñ–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã . –ñ–∞—É–∞–ø—Ç—ã –∫“Ø—Ç—ñ“£—ñ–∑...');

                    sleep(5);

                    $price = GetPriceByProductIdAction::execute($product->id);

                    sleep(2);

                    $html = 'üìÜ ' . Carbon::parse($price->created_at)->isoFormat('D MMMM, YYYY') . PHP_EOL
                        . 'üíµ <b>' . round($price->value) . ' </b> &#8376;' . PHP_EOL;

                    $this->reply('–°—ñ–∑–¥—ñ“£ —Ç–∞—É–∞—Ä—ã“£—ã–∑ —Å”ô—Ç—Ç—ñ —Ç—ñ—Ä–∫–µ–ª–¥—ñ. –ë–∞—Å—Ç–∞–ø“õ—ã –±–∞“ì–∞—Å—ã —Ç”©–º–µ–Ω–¥–µ–≥—ñ–¥–µ–π:' . PHP_EOL . $html);
                }

            } else {

                $this->reply($checkedUrl);
                $this->reply('–°—ñ–ª—Ç–µ–º–µ“£—ñ–∑ “õ–∞—Ç–µ, —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑, –±–∞—Å“õ–∞ –∂–∞“ì–¥–∞–π–¥–∞ –Ω“±—Å“õ–∞—É–ª—ã“õ—Ç—ã “õ–∞—Ä–∞“£—ã–∑.');
            }
        } catch (\Throwable $throwable) {

            Log::error($throwable->getMessage());
            $this->reply('“ö—ã–∑–º–µ—Ç —É–∞“õ—ã—Ç—à–∞ —Ç–æ“õ—Ç–∞—É–ª—ã, –∫–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞ –∂–∞–Ω–¥–∞–Ω–∞–¥—ã.');
        }

    }

    private
    function accountHasProduct($accountId): ?Product
    {
        return GetProductByAccountIdAction::execute(($this->getAccount($accountId))?->id);
    }

    private
    function getAccount($accountId): ?Account
    {
        return GetAccountByChatIdAction::execute($accountId);
    }

}
